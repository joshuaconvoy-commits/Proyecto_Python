import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path
import os

# Importar plotly con manejo de errores
try:
    import plotly.express as px
    import plotly.graph_objects as go
except ImportError:
    st.error("Error: No se pudo importar plotly. Instalando dependencias...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "plotly"])
    import plotly.express as px
    import plotly.graph_objects as go

pd.options.mode.chained_assignment = None  # default='warn'

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="Dashboard de Casos",
    page_icon="丘뒲잺",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Aplicar estilo personalizado
st.markdown("""
    <style>
    .main {
        padding: 0rem 1rem;
    }
    .stMetric .metric-value {
        font-size: 2rem;
    }
    </style>
""", unsafe_allow_html=True)

# Funci칩n para cargar datos
@st.cache_data(ttl=3600)  # Cach칠 por 1 hora
def load_data():
    """
    Carga los datos desde la carpeta data/.
    Intenta primero con CSV, luego con JSON si es necesario.
    """
    data_dir = Path("data")
    
    try:
        # Buscar archivos CSV primero
        csv_files = list(data_dir.glob("*.csv"))
        if csv_files:
            # Leer el CSV con manejo de codificaci칩n
            df = pd.read_csv(csv_files[0], sep=';', encoding='utf-8')
            
            # Limpiar nombres de columnas
            df.columns = df.columns.str.strip()
            
            # Asegurar que las columnas num칠ricas sean num칠ricas
            if 'Duraci칩n' in df.columns:
                df['Duraci칩n'] = pd.to_numeric(df['Duraci칩n'], errors='coerce')
            
            # Convertir la columna de fecha y ordenar
            if 'Fecha L칤mite' in df.columns:
                df['Fecha L칤mite'] = pd.to_datetime(df['Fecha L칤mite'], errors='coerce')
                df = df.sort_values('Fecha L칤mite')
            
            # Rellenar valores NaN
            for col in df.select_dtypes(include=['object']):
                df[col] = df[col].fillna('No especificado')
            
            # Limpiar espacios en blanco en columnas de texto
            for col in df.select_dtypes(include=['object']):
                df[col] = df[col].str.strip()
            
            return df
    except Exception as e:
        st.error(f"Error al cargar el archivo: {str(e)}")
        return pd.DataFrame()
    
    # Si no hay CSV, buscar JSON
    json_files = list(data_dir.glob("*.json"))
    if json_files:
        return pd.read_json(json_files[0])
    
    # Si no hay datos, usar datos de ejemplo
    return pd.DataFrame({
        'fecha': pd.date_range('2023-01-01', '2023-12-31', freq='D'),
        'ventas': np.random.randint(100, 1000, 365),
        'categoria': np.random.choice(['A', 'B', 'C'], 365),
        'region': np.random.choice(['Norte', 'Sur', 'Este', 'Oeste'], 365),
    })

def get_kpi_metrics(df):
    """
    Calcula m칠tricas clave (KPIs) del DataFrame
    """
    kpis = []
    
    # Total de casos
    total_casos = len(df)
    kpis.append({
        'title': 'Total de Casos',
        'value': total_casos,
        'delta': 'casos registrados',
        'help': 'N칰mero total de casos en el sistema'
    })
    
    # M칠trica de Duraci칩n
    if 'Duraci칩n' in df.columns:
        duracion_media = df['Duraci칩n'].mean()
        duracion_std = df['Duraci칩n'].std()
        kpis.append({
            'title': 'Duraci칩n Promedio',
            'value': f"{duracion_media:.1f}",
            'delta': f"췀{duracion_std:.1f} d칤as",
            'help': 'Promedio y desviaci칩n est치ndar de la duraci칩n de los casos'
        })
    
    # Pr칩ximos vencimientos (pr칩ximos 30 d칤as)
    if 'Fecha L칤mite' in df.columns:
        today = pd.Timestamp.now()
        proximos = df[df['Fecha L칤mite'].between(today, today + pd.Timedelta(days=30))]
        kpis.append({
            'title': 'Pr칩ximos Vencimientos',
            'value': len(proximos),
            'delta': 'en los pr칩ximos 30 d칤as',
            'help': 'Casos que vencen en los pr칩ximos 30 d칤as'
        })
    
    # Top actuaciones
    if 'Actuaci칩n' in df.columns:
        top_actuacion = df['Actuaci칩n'].value_counts().iloc[0]
        top_actuacion_nombre = df['Actuaci칩n'].value_counts().index[0]
        kpis.append({
            'title': 'Actuaci칩n m치s Com칰n',
            'value': str(top_actuacion_nombre)[:20] + '...' if len(str(top_actuacion_nombre)) > 20 else str(top_actuacion_nombre),
            'delta': f"{top_actuacion} casos",
            'help': 'Tipo de actuaci칩n m치s frecuente'
        })
    
    return kpis

# Cargar datos
try:
    df = load_data()
    
    # T칤tulo principal
    st.title("游늵 Dashboard Interactivo")
    
    # Secci칩n 1: L칤nea de Tiempo y Gr치fico de L칤neas
    st.subheader("Evoluci칩n Temporal")
    
    # Usar la columna Fecha L칤mite para la l칤nea temporal
    date_col = 'Fecha L칤mite' if 'Fecha L칤mite' in df.columns else None
    
    # Asegurarse de que la fecha est칠 en formato datetime
    if date_col:
        df[date_col] = pd.to_datetime(df[date_col])
    
    # Gr치fico de l칤nea temporal
    if date_col and 'Duraci칩n' in df.columns:
        # Calcular la media
        media_duracion = df['Duraci칩n'].mean()
        
        # Ordenar el DataFrame por fecha
        df_sorted = df.sort_values(by=date_col)
        
        # Crear el gr치fico base con la l칤nea de duraci칩n
        fig_timeline = px.line(
            df_sorted,
            x=date_col,
            y='Duraci칩n',
            title='Evoluci칩n de la Duraci칩n de Casos'
        )
        
        # Agregar la l칤nea de la media
        fig_timeline.add_hline(
            y=media_duracion,
            line_dash="dash",
            line_color="red",
            annotation_text=f"Media: {media_duracion:.2f}",
            annotation_position="top right"
        )
        
        # Actualizar el dise침o
        fig_timeline.update_layout(
            showlegend=True,
            hovermode='x unified'
        )
        
        # Actualizar las trazas para mostrar leyendas
        fig_timeline.data[0].name = 'Duraci칩n'
        
        st.plotly_chart(fig_timeline, use_container_width=True)
    
    # Secci칩n 2: Tarjetas de KPIs
    st.subheader("游늵 M칠tricas Clave")
    kpi_metrics = get_kpi_metrics(df)
    
    # Crear filas de m칠tricas con 4 tarjetas por fila
    cols = st.columns(4)
    for idx, kpi in enumerate(kpi_metrics):
        with cols[idx % 4]:
            st.metric(
                label=kpi['title'],
                value=kpi['value'],
                delta=kpi['delta'],
                help=kpi.get('help', '')
            )
    
    # Secci칩n 3: Gr치ficos Detallados
    st.subheader("An치lisis Detallado")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr치fico de barras
        categorical_cols = df.select_dtypes(include=['object']).columns
        if len(categorical_cols) > 0:
            cat_col = categorical_cols[0]
            st.write(f"### Conteo de {cat_col}")
            # Asegurar que no hay valores nulos antes de hacer value_counts
            counts = df[cat_col].fillna('No especificado').value_counts()
            st.write(pd.DataFrame({
                'Categor칤a': counts.index,
                'Cantidad': counts.values
            }))
        
        # Gr치fico de torta con top 5
        if len(categorical_cols) > 1:
            cat_col2 = categorical_cols[1]
            # Obtener el conteo de valores
            value_counts = df[cat_col2].value_counts()
            
            # Separar top 5 y agrupar el resto
            top_5 = value_counts.head(5)
            others = pd.Series({'Otros': value_counts[5:].sum()}) if len(value_counts) > 5 else pd.Series({})
            
            # Combinar top 5 y otros
            final_counts = pd.concat([top_5, others])
            
            # Crear DataFrame para el gr치fico
            pie_data = pd.DataFrame({
                'Categor칤a': final_counts.index,
                'Cantidad': final_counts.values
            })
            
            fig_pie = px.pie(
                pie_data,
                values='Cantidad',
                names='Categor칤a',
                title=f'Top 5 - {cat_col2}',
            )
            
            # Actualizar el dise침o
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            fig_pie.update_layout(
                showlegend=True,
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
            )
            
            st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        # Segundo gr치fico de barras
        if len(categorical_cols) > 2:
            cat_col3 = categorical_cols[2]
            st.write(f"### Conteo de {cat_col3}")
            st.write(df[cat_col3].value_counts())
        
        # Segundo gr치fico de torta con top 5
        if len(categorical_cols) > 3:
            cat_col4 = categorical_cols[3]
            # Obtener el conteo de valores
            value_counts = df[cat_col4].value_counts()
            
            # Separar top 5 y agrupar el resto
            top_5 = value_counts.head(5)
            others = pd.Series({'Otros': value_counts[5:].sum()}) if len(value_counts) > 5 else pd.Series({})
            
            # Combinar top 5 y otros
            final_counts = pd.concat([top_5, others])
            
            # Crear DataFrame para el gr치fico
            pie_data = pd.DataFrame({
                'Categor칤a': final_counts.index,
                'Cantidad': final_counts.values
            })
            
            fig_pie2 = px.pie(
                pie_data,
                values='Cantidad',
                names='Categor칤a',
                title=f'Top 5 - {cat_col4}',
            )
            
            # Actualizar el dise침o
            fig_pie2.update_traces(textposition='inside', textinfo='percent+label')
            fig_pie2.update_layout(
                showlegend=True,
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
            )
            
            st.plotly_chart(fig_pie2, use_container_width=True)

except Exception as e:
    st.error(f"Error al cargar o procesar los datos: {str(e)}")
    st.info("Por favor, aseg칰rese de tener archivos de datos (.csv o .json) en la carpeta 'data/'")

